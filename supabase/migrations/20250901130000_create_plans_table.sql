-- Migration: Cria a tabela `plans` e a popula com os planos iniciais.
--
-- Motivo:
-- A tabela `plans` é fundamental para o sistema de assinaturas e preços, mas não existia.
-- Esta migração estabelece a estrutura central para armazenar os diferentes planos oferecidos.

-- 0. Habilita a extensão `moddatetime` se ainda não estiver habilitada
CREATE EXTENSION IF NOT EXISTS moddatetime WITH SCHEMA extensions;

-- 1. Criação da tabela `plans`
CREATE TABLE IF NOT EXISTS public.plans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    price_monthly NUMERIC(10, 2) NOT NULL DEFAULT 0.00,
    price_yearly NUMERIC(10, 2) NOT NULL DEFAULT 0.00,
    features JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

COMMENT ON TABLE public.plans IS 'Armazena os diferentes planos de assinatura disponíveis no sistema.';
COMMENT ON COLUMN public.plans.name IS 'O nome do plano (ex: Básico, Pró, Premium).';
COMMENT ON COLUMN public.plans.price_monthly IS 'O preço da assinatura mensal.';
COMMENT ON COLUMN public.plans.price_yearly IS 'O preço da assinatura anual.';
COMMENT ON COLUMN public.plans.features IS 'Uma lista em JSON das funcionalidades incluídas no plano.';

-- 2. Habilita a segurança em nível de linha (RLS)
ALTER TABLE public.plans ENABLE ROW LEVEL SECURITY;

-- 3. Cria uma política para permitir a leitura pública dos planos
-- Isso é necessário para que a landing page e a página de configurações possam exibir os preços.
CREATE POLICY "Allow public read access to plans" 
ON public.plans 
FOR SELECT 
TO anon, authenticated 
USING (true);

-- 4. Cria uma política para permitir que administradores gerenciem os planos
CREATE POLICY "Allow admin full access to plans" 
ON public.plans 
FOR ALL 
TO service_role 
USING (is_admin(auth.uid()));

-- 5. Popula a tabela com os planos iniciais
INSERT INTO public.plans (name, description, price_monthly, price_yearly, features)
VALUES
    (
        'Básico',
        'Para quem está começando a organizar suas cobranças.',
        19.90,
        199.90,
        '["Controle de até 20 clientes", "Dashboard simples", "Notificação de cobrança por e-mail"]'::JSONB
    ),
    (
        'Pró',
        'Para profissionais que precisam de mais automação e relatórios.',
        39.90,
        399.90,
        '["Clientes ilimitados", "Tudo do plano Básico", "Relatórios detalhados", "Suporte via chat"]'::JSONB
    ),
    (
        'Premium',
        'Para empresas que buscam o máximo de performance e suporte.',
        59.90,
        599.90,
        '["Tudo do plano Pró", "Notificação por WhatsApp", "Suporte prioritário", "Acesso antecipado a recursos"]'::JSONB
    )
ON CONFLICT (name) DO NOTHING;

-- 6. Trigger para atualizar o campo `updated_at` automaticamente
CREATE TRIGGER handle_updated_at
    BEFORE UPDATE ON public.plans
    FOR EACH ROW
    EXECUTE PROCEDURE extensions.moddatetime (updated_at);
